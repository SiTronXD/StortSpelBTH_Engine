#version 460

#define FREQ_PER_FRAME 0

layout (local_size_x = 8) in;

// Uniform buffer
layout(set = FREQ_PER_FRAME, binding = 0) uniform CameraBuffer
{
    mat4 projection;
    mat4 view;
    vec4 worldPos;
} cameraBuffer;

// Storage buffer
struct ParticleInfoData
{
    mat4 transform;
    vec4 life;  // vec4(currentLifeTime, maxLifeTime, 0.0f, 0.0f)
    vec2 startSize;
    vec2 endSize;
    vec4 startColor;
    vec4 endColor;
};
layout(std140, set = FREQ_PER_FRAME, binding = 1) buffer ParticleInfosBuffer
{
    ParticleInfoData infos[];
} particles;

// Uniform buffer
layout(set = FREQ_PER_FRAME, binding = 2) uniform ParticleBufferData
{
    vec3 padding;
    float deltaTime;
} globalParticleBuffer;

void main()
{
    // Get info
    ParticleInfoData particle = 
        particles.infos[gl_GlobalInvocationID.x];
    vec3 position = particle.transform[3].xyz;
    float deltaTime = globalParticleBuffer.deltaTime;

    // Apply change
    position.y += 1.0f * deltaTime;

    // Reset life
    particle.life.x += deltaTime;
    if(particle.life.x >= particle.life.y)
    {
        particle.life.x = mod(particle.life.x, particle.life.y);
        position.y = 0.0f;
    }

    // Scale
    vec2 currentScale = mix(
        particle.startSize, 
        particle.endSize,
        clamp(particle.life.x / particle.life.y, 0.0f, 1.0f)
    );

    // Update direction
    vec3 forward = normalize(cameraBuffer.worldPos.xyz - position);
    vec3 right = -normalize(cross(forward, vec3(0.0f, 1.0f, 0.0f)));
    vec3 up = -cross(right, forward);

    // Update transform
    particle.transform = mat4(
        vec4(   right,  0.0f) * currentScale.x,
        vec4(      up,  0.0f) * currentScale.y,
        vec4( forward,  0.0f),
        vec4(position,  1.0f)
    );

    // Update new data
    particles.infos[gl_GlobalInvocationID.x] = particle;
}