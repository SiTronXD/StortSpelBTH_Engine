#version 460

#define FREQ_PER_FRAME 0

layout (local_size_x = 8) in;

// Uniform buffer
layout(set = FREQ_PER_FRAME, binding = 0) uniform CameraBuffer
{
    mat4 projection;
    mat4 view;
    vec4 worldPos;
} cameraBuffer;

// Storage buffer
struct ParticleInfoData
{
    mat4 transform;
    vec4 position;
};
layout(std140, set = FREQ_PER_FRAME, binding = 1) buffer ParticleInfosBuffer
{
    ParticleInfoData infos[];
} particles;

void main()
{
    // Get info
    mat4 transform = 
        particles.infos[gl_GlobalInvocationID.x].transform;
    vec3 position = transform[3].xyz;

    // Apply change
    position.y += 0.01f;

    // Update position
    transform[3].xyz = position;

    // Update new transform
    particles.infos[gl_GlobalInvocationID.x].transform = transform;
}